generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  password          String
  posts             Post[]
  comments          Comment[]
  postFavorites     PostFavorite[]
  commentFavorites  CommentFavorite[]
  createdAt         DateTime           @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
}

model Post {
  id         Int            @id @default(autoincrement())
  title      String
  content    String
  status     PostStatus     @default(DRAFT)
  author     User           @relation(fields: [authorId], references: [id])
  authorId   Int
  category   Category       @relation(fields: [categoryId], references: [id])
  categoryId Int
  favorites  PostFavorite[]
  favoritesCount Int            @default(0)
  comments   Comment[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum PostStatus {
  DRAFT
  ACTIVE
  REMOVED
}

model PostFavorite {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  post    Post  @relation(fields: [postId], references: [id])
  postId  Int

  @@unique([userId, postId])
}

model Comment {
  id         Int              @id @default(autoincrement())
  content    String
  post       Post             @relation(fields: [postId], references: [id])
  postId     Int
  author     User             @relation(fields: [authorId], references: [id])
  authorId   Int
  parent     Comment?         @relation("CommentToReplies", fields: [parentId], references: [id])
  parentId   Int?
  replies    Comment[]        @relation("CommentToReplies")
  favorites  CommentFavorite[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model CommentFavorite {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  comment    Comment  @relation(fields: [commentId], references: [id])
  commentId  Int

  @@unique([userId, commentId])
}